// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "julo-test/internal/storage/entity"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateCake provides a mock function with given fields: cake
func (_m *Storage) CreateCake(cake *entity.Cake) error {
	ret := _m.Called(cake)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Cake) error); ok {
		r0 = rf(cake)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAllCake provides a mock function with given fields: page, perPage
func (_m *Storage) FetchAllCake(page int, perPage int) ([]entity.Cake, int64, error) {
	ret := _m.Called(page, perPage)

	var r0 []entity.Cake
	if rf, ok := ret.Get(0).(func(int, int) []entity.Cake); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Cake)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchCakeByID provides a mock function with given fields: id
func (_m *Storage) FetchCakeByID(id string) (*entity.Cake, error) {
	ret := _m.Called(id)

	var r0 *entity.Cake
	if rf, ok := ret.Get(0).(func(string) *entity.Cake); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Cake)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveCakeByID provides a mock function with given fields: id
func (_m *Storage) RemoveCakeByID(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCakeByID provides a mock function with given fields: cake, id
func (_m *Storage) UpdateCakeByID(cake *entity.Cake, id string) error {
	ret := _m.Called(cake, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Cake, string) error); ok {
		r0 = rf(cake, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
